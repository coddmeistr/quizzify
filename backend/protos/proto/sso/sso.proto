syntax = "proto3";

package auth;

import "google/api/annotations.proto";

option go_package = "quizzify.sso.v1;ssov1;";

service Auth {
    rpc Register (RegisterRequest) returns (RegisterResponse){
        option (google.api.http) = {
            post: "/sso/register"
            body: "*"
        };
    }
    rpc Login (LoginRequest) returns (LoginResponse){
        option (google.api.http) = {
            post: "/sso/login"
            body: "*"
        };
    }
    rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse) {
        option (google.api.http) = {
            get: "/sso/is_admin/{user_id}"
        };
    };
    rpc AccountInfo (AccountInfoRequest) returns (AccountInfoResponse) {
        option (google.api.http) = {
            get: "/sso/account"
        };
    };
    rpc DeleteAccount (DeleteAccountRequest) returns (DeleteAccountResponse) {
        option (google.api.http) = {
            delete: "/sso/account"
        };
    };
    rpc ListAccounts (ListAccountsRequest) returns (ListAccountsResponse) {
        option (google.api.http) = {
            get: "/sso/accounts"
        };
    };
}

service Permission {
    rpc AddPermission (AddPermissionRequest) returns (AddPermissionResponse){
        option (google.api.http) = {
            post: "/sso/permission"
            body: "*"
        };
    }
    rpc RemovePermission (RemovePermissionRequest) returns (RemovePermissionResponse){
        option (google.api.http) = {
            delete: "/sso/{user_id}/permission/{permission_id}"
        };
    }
}

message DeleteAccountRequest {
    string id = 1; // ID of the user to delete.
}
message DeleteAccountResponse {
    bool deleted = 1; // Indicates if account was deleted.
}

message ListAccountsRequest {}

message ListAccountsResponse {
    repeated AccountInfoResponse accounts = 1; // List of accounts.
}


message AccountInfoRequest {
    string token = 1; // Token of the user.
}

message AccountInfoResponse {
    int64 user_id = 1; // User ID of the user.
    string login = 2; // Login of the user.
    string email = 3; // Email of the user.
    repeated int32 permissions = 4; // Permissions of the user.
    int32 app_id = 5; // App ID of the user.
    bool is_admin = 6; // Indicates whether the user is an admin.
}

message AddPermissionRequest {
    int64 user_id = 1; // User ID of the user to give permission to.
    int64 permission_id = 2; // Permission ID of given permission.
}

message AddPermissionResponse {
    bool granted = 1; // Indicates if permission was granted.
}

message RemovePermissionRequest {
    int64 user_id = 1; // User ID of the user to remove permission from.
    int64 permission_id = 2; // Permission ID of removen permission.
}

message RemovePermissionResponse {
    bool removed = 1; // Indicates if permission was removed.
}

message RegisterRequest {
    string login = 1; // Login of user to register.
    string email = 2; // Email of user to register.
    string password = 3; // Password of user to register.
}

message RegisterResponse {
    int64 user_id = 1; // User ID of the registered user.
}

message LoginRequest {
    string login = 1; // Login of the user to login.
    string email = 2; // Email of the user to login (Using when login field is empty string).
    string password = 3; // Password of the user to login.
    int32 app_id = 4; // App ID to login to.
}

message LoginResponse {
    string token = 1; // Authorization token of the logged in user.
}

message IsAdminRequest {
    int64 user_id = 1; // User ID to check if this user is admin.
}

message IsAdminResponse {
    bool is_admin = 1; // Indicates whether the user is an admin.
}