{
  "swagger": "2.0",
  "info": {
    "title": "proto/sso/sso.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Auth"
    },
    {
      "name": "Permission"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/sso/account": {
      "get": {
        "operationId": "Auth_AccountInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authAccountInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "description": "Token of the user.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/sso/is_admin/{userId}": {
      "get": {
        "operationId": "Auth_IsAdmin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authIsAdminResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "User ID to check if this user is admin.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/sso/login": {
      "post": {
        "operationId": "Auth_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authLoginRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/sso/permission": {
      "post": {
        "operationId": "Permission_AddPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authAddPermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authAddPermissionRequest"
            }
          }
        ],
        "tags": [
          "Permission"
        ]
      }
    },
    "/sso/register": {
      "post": {
        "operationId": "Auth_Register",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authRegisterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRegisterRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/sso/{userId}/permission/{permissionId}": {
      "delete": {
        "operationId": "Permission_RemovePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authRemovePermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "User ID of the user to remove permission from.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permissionId",
            "description": "Permission ID of removen permission.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Permission"
        ]
      }
    }
  },
  "definitions": {
    "authAccountInfoResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64",
          "description": "User ID of the user."
        },
        "login": {
          "type": "string",
          "description": "Login of the user."
        },
        "email": {
          "type": "string",
          "description": "Email of the user."
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Permissions of the user."
        },
        "appId": {
          "type": "integer",
          "format": "int32",
          "description": "App ID of the user."
        },
        "isAdmin": {
          "type": "boolean",
          "description": "Indicates whether the user is an admin."
        }
      }
    },
    "authAddPermissionRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64",
          "description": "User ID of the user to give permission to."
        },
        "permissionId": {
          "type": "string",
          "format": "int64",
          "description": "Permission ID of given permission."
        }
      }
    },
    "authAddPermissionResponse": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "boolean",
          "description": "Indicates if permission was granted."
        }
      }
    },
    "authIsAdminResponse": {
      "type": "object",
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "description": "Indicates whether the user is an admin."
        }
      }
    },
    "authLoginRequest": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string",
          "description": "Login of the user to login."
        },
        "email": {
          "type": "string",
          "description": "Email of the user to login (Using when login field is empty string)."
        },
        "password": {
          "type": "string",
          "description": "Password of the user to login."
        },
        "appId": {
          "type": "integer",
          "format": "int32",
          "description": "App ID to login to."
        }
      }
    },
    "authLoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Authorization token of the logged in user."
        }
      }
    },
    "authRegisterRequest": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string",
          "description": "Login of user to register."
        },
        "email": {
          "type": "string",
          "description": "Email of user to register."
        },
        "password": {
          "type": "string",
          "description": "Password of user to register."
        }
      }
    },
    "authRegisterResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64",
          "description": "User ID of the registered user."
        }
      }
    },
    "authRemovePermissionResponse": {
      "type": "object",
      "properties": {
        "removed": {
          "type": "boolean",
          "description": "Indicates if permission was removed."
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
